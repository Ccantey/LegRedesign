## Create git repository on new project (hidden folder)
git init

## ADD ALL FILES (stage for commit)
git add *

## COMMIT
git commit -a -m "some message"

## VIEW LOG OF ALL COMMITS
git log

## VIEW THE WORKING TREE STATUS (differences since last commit)
git status

## CREATE A BRANCH and CHECK IT OUT
git checkout -b [branch]
## Shorthand for git branch [branch] git checkout [branch]

## VIEW ALL BRANCHES IN LOCAL REPOSITORY
## git branch with no arguments
git branch 

## DELETE A BRANCH
git branch -d [branch]

## DELETE A BRANCH FROM REMOTE
git push origin --delete [branch]

## PUSH BRANCH TO REMOTE
git push -u origin [branch]

## PUSH ALL BRANCHES TO REMOTE
git push -u origin --all

## PULL ALL BRANCHES FROM REMOTE (that currently exist on your local repository)
git pull --all

## Remove a file that has been added to .gitignore but remains on repo
git rm --cached <file>

## PULL SOMEONE ELSE'S BRANCH FROM REMOTE
## must checkout locally
git checkout origin/[branch]

-or-

# will NOT work in modern git if you have multiple remotes.
git fetch
git checkout [branch]


## WHATS THE DIFFERENCE BETWEEN git pull and git fetch?
In the simplest terms, git pull does a git fetch followed by a git merge

## WHAT IS ORIGIN?
Your remote repository (gitlab).
My origin is actually on github, I created 2 new remotes, gitlab and LCC (our organizational page)
So when I push I push to all 3 remotes:
git push origin --all && git push gitlab --all && git push LCC --all

## CHECK REMOTE
git remote show origin

## VIEW ALL BRANCHES
## -a shows all local and remote branches
git branch -a
## -r shows all remote branches
git branch -r

## MERGE BRANCH WITH ORIGIN MASTER (we will use merge requests in the gitlab UI)
#Check out, review, and merge locally
	#Step 1. Fetch and check out the branch for this merge request
	git fetch origin
	git checkout -b [branch] origin/[branch]
	#Step 2. Review the changes locally

	#Step 3. Merge the branch and fix any conflicts that come up
	git checkout master
	git merge --no-ff [branch]

	#Step 4. Push the result of the merge to GitLab
	git push origin master

## REVERT TO A PREVIOUS COMMIT (I will use "0d1d7fc32" as an example commit. Find commit from git log)
## THIS CAN GET TRICKY WORKING WITH DETATCHED HEADS. DANGER AHEAD
## YOU MAY WANT TO BACKUP YOUR WORKING DIRECTORY

Cheatsheet: http://sethrobertson.github.io/GitFixUm/fixup.html

## SEE https://stackoverflow.com/questions/4114095/how-to-revert-git-repository-to-a-previous-commit

## TEMPORARILY SWITCH TO DIFFERENT COMMIT
# This will detach your HEAD, that is, leave you with no branch checked out:
git checkout 0d1d7fc32 

## SWITCH TO A PREVIOUS COMMIT USING A BRANCH (best practice?)
git checkout -b [branch] 0d1d7fc32

## HARD DELETE UNPUBLISHED COMMITS
# This will destroy any local modifications.
# Don't do it if you have uncommitted work you want to keep.
git reset --hard 0d1d7fc32

## WORKING WITH A DETATCHED HEAD
https://stackoverflow.com/questions/34519665/how-to-move-head-back-to-a-previous-location-detached-head/34519716#34519716

## MERGE CONFLICTS
Merge conflicts may occur if competing changes are made to the same line of a file or when a file is deleted that another person is attempting to edit

They will be denoted in conflicted file with <<<<<< master ========= >>>>>>>>> branch

https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/
